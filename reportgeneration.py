def generate_report(user, url, vulnerabilities):
    from datetime import datetime

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("report.html", "w", encoding="utf-8") as report:
        report.write(f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Advanced Fuzzer Report</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
            <style>
                body {{
                    background-color: #f5f6fa;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                }}
                .badge-high {{ background-color: #e74c3c; }}
                .badge-medium {{ background-color: #f1c40f; color: #000; }}
                .badge-low {{ background-color: #2ecc71; }}
                .dark-mode {{
                    background-color: #1e1e2f !important;
                    color: #f5f6fa !important;
                }}
                .dark-mode .card {{
                    background-color: #2a2a40 !important;
                    color: #f5f6fa !important;
                    border-color: #444;
                }}
                .dark-mode .table thead {{
                    background-color: #333 !important;
                    color: #f5f6fa !important;
                }}
                .dark-mode .list-group-item {{
                    background-color: #2a2a40;
                    color: #f5f6fa;
                }}
                .table-hover tbody tr:hover {{
                    background-color: #dff9fb;
                }}
                .dark-mode .table-hover tbody tr:hover {{
                    background-color: #44475a;
                }}
                .section-toggle {{
                    cursor: pointer;
                    user-select: none;
                }}
                .section-header {{
                    background-color: #3498db;
                    color: white;
                    padding: 10px 20px;
                    border-radius: 6px;
                    margin-bottom: 10px;
                }}
                .card {{
                    border: 1px solid #dee2e6;
                    border-radius: 0.5rem;
                    margin-bottom: 1rem;
                }}
                .card-body {{
                    padding: 1rem;
                }}
                .vuln-title {{
                    font-weight: bold;
                    font-size: 1.25rem;
                    color: #e67e22;
                }}
                code {{
                    background-color: #f2f2f2;
                    padding: 2px 6px;
                    border-radius: 5px;
                    font-size: 0.95rem;
                    color: #c0392b;
                }}
            </style>
        </head>
        <body class="p-4">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="mb-4"><i class="fas fa-shield-alt"></i> Advanced Fuzzer Report</h1>
                    <button class="btn btn-dark" onclick="toggleDarkMode()">üåó Dark Mode</button>
                </div>
                <div class="mb-3">
                    <p><strong>üîó URL Tested:</strong> {url}</p>
                    <p><strong>üë§ Generated by:</strong> {user} &nbsp;&nbsp; <strong>üìÖ Date:</strong> {now}</p>
                </div>
                <input type="text" id="searchInput" class="form-control my-3" placeholder="üîç Search payloads...">

                <h2 class="mt-4 section-header">üõ°Ô∏è Vulnerabilities Found</h2>
        """)

        categories = {
            "SQL Injection": [],
            "Cross-Site Scripting (XSS)": [],
            "Command Injection": [],
            "Directory Traversal": [],
            "Broken Authentication": [],
            "Security Misconfiguration": [],
            "Sensitive Data Exposure": [],
            "Insecure File Upload": [],
            "Cross-Site Request Forgery (CSRF)": [],
            "IDOR": [],
            "Brute Force / Multiple Login Attempts": []
        }

        for vuln in vulnerabilities:
            if vuln["type"] in categories:
                categories[vuln["type"]].append(vuln)
            else:
                categories["Security Misconfiguration"].append(vuln)

        vuln_index = 0
        for category, vulns in categories.items():
            if vulns:
                report.write(f"""
                <div class="card">
                    <div class="card-header section-toggle" onclick="toggleSection('section{vuln_index}')">
                        <span class="vuln-title"><i class="fas fa-exclamation-circle"></i> {category}</span>
                    </div>
                    <div class="card-body" id="section{vuln_index}">
                        <table class="table table-hover table-bordered table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Payload</th>
                                    <th>Recommendation</th>
                                    <th>Severity</th>
                                </tr>
                            </thead>
                            <tbody>
                """)
                for vuln in vulns:
                    severity = vuln.get("severity", "Medium").capitalize()
                    badge_class = {
                        "High": "badge-high",
                        "Medium": "badge-medium",
                        "Low": "badge-low"
                    }.get(severity, "badge-medium")
                    report.write(f"""
                        <tr>
                            <td><code>{vuln['payload']}</code></td>
                            <td>{vuln['recommendation']}</td>
                            <td><span class="badge {badge_class}">{severity}</span></td>
                        </tr>
                    """)
                report.write("""
                            </tbody>
                        </table>
                    </div>
                </div>
                """)
                vuln_index += 1

        if not vulnerabilities:
            report.write("<div class='alert alert-success'>‚úÖ No vulnerabilities found!</div>")

        report.write("""
            <h2 class="mt-5 section-header">üîê General Security Solutions</h2>
            <ul class="list-group mb-5">
                <li class="list-group-item"><b>SQL Injection:</b> Use parameterized queries and ORM frameworks.</li>
                <li class="list-group-item"><b>XSS:</b> Sanitize input and use Content Security Policy (CSP).</li>
                <li class="list-group-item"><b>Command Injection:</b> Avoid shell commands, validate input strictly.</li>
                <li class="list-group-item"><b>Directory Traversal:</b> Use secure APIs and validate file paths.</li>
                <li class="list-group-item"><b>CSRF:</b> Use CSRF tokens and SameSite cookie attributes.</li>
                <li class="list-group-item"><b>IDOR:</b> Enforce object-level authorization.</li>
                <li class="list-group-item">Enable a Web Application Firewall (WAF).</li>
                <li class="list-group-item">Keep frameworks and libraries up-to-date.</li>
            </ul>
        </div>

        <script>
            function toggleDarkMode() {{
                document.body.classList.toggle('dark-mode');
            }}

            function toggleSection(id) {{
                const el = document.getElementById(id);
                el.style.display = el.style.display === "none" ? "block" : "none";
            }}

            document.getElementById('searchInput').addEventListener('input', function () {{
                let filter = this.value.toLowerCase();
                document.querySelectorAll("tbody tr").forEach(row => {{
                    const text = row.textContent.toLowerCase();
                    row.style.display = text.includes(filter) ? '' : 'none';
                }});
            }});
        </script>

        </body>
        </html>
        """)
